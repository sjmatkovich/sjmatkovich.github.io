{
  "hash": "4a66c1f2cdd32650c3b038924dc0d9aa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using limma without empirical Bayes\"\ndescription: \"Modifying the R/Bioconductor limma workflow\"\nauthor:\n    name: Scot J Matkovich\n    url: https://sjmatkovich.github.io/\n    orcid: 0000-0002-7398-6857\n    affiliation: Eli Lilly and Company\n    affiliation-url:  \ndate: 2024-09-07\ncategories: [R, Bioconductor, limma, differential gene expression, empirical Bayes, blog] # self-defined categories\nimage: bioconductor_logo.svg\ncitation:\n  author: SJ Matkovich\n  url: https://sjmatkovich.github.io/posts/2024-09-07_limma_without_empirical_Bayes/ \ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n# The empirical Bayes function of *limma* isn't always desired, but the useful output tables are still wanted\n\n## Situation\n\nYou are preparing differential gene expression calculations with the R/Bioconductor *limma* package (including RNA-sequencing extensions such as *limma-voom*). While *limma* offers empirical Bayes moderation of t-statistics ('borrowing' variance estimates across genes), you have a large number of individual samples or have other reasons to avoid this procedure.\n\n## Problem\n\nOmitting the `eBayes` step in the limma workflow means that t-statistics are not calculated, and the useful `topTable` function of the package to summarize differential expression calculations does not function.\n\nFor example (assuming that you have prepared a DGEList object `d`, a model formula `design` and a contrasts matrix `contrasts.matrix`), a typical workflow including empirical Bayes moderation would be as follows:\n\n\n::: {.cell code-copy='true'}\n\n```{.r .cell-code}\nv <- voom(d, design, plot = T)\nvfit <- lmFit(v, design)\nvfit_c <- contrasts.fit(vfit, contrasts=contrast.matrix)\n\n# Empirical Bayes moderation\nvfit_eb <- eBayes(vfit_c, 0.01) # estimating that 1% of genes are differentially expressed\n\nx <- topTable(vfit_eb, number=Inf, coef=z, sort.by=\"none\")\n# z is the contrast of interest\n# No restrictions are placed on the output of topTable (number=Inf)\ndf <- as.data.frame(x[,c(1:6)]) # to extract important columns\n```\n:::\n\n\n## Solution\n\nAn alternative workflow which does not use empirical Bayes moderation and calculates t-statistics separately would be as follows:\n\n\n::: {.cell code-copy='true'}\n\n```{.r .cell-code}\nv <- voom(d, design, plot = T)\nvfit <- lmFit(v, design)\nvfit_c <- contrasts.fit(vfit, contrasts=contrast.matrix)\n\nvfit_c$t <- vfit_c$coef/vfit_c$stdev.unscaled/vfit_c$sigma\nvfit_c$p.value <- 2 * pt(-abs(vfit_c$t), df = vfit_c$df.residual)\nvfit_c$lods <- vfit_eb$lods\n# log-odds of differential expression:\n# this is not technically correct in this instance but permits the subsequent topTable function to work\n\nx <- topTable(vfit_c, number=Inf, coef=z, sort.by=\"none\") # z is the contrast of interest\ndf <- as.data.frame(x[,c(1:5)]) # this drops the B value (lods) from the output as it is not correct\n```\n:::\n\n\nNote the last line of the second workflow, which drops the 'dummy' B value needed for `topTable` to work. This is a limitation of this workaround. I suspect the 'dummy' B value could be almost anything, but for convenience I extracted it from the initial, empirical Bayes-moderated `vfit_eb` object. Typically I am interested in parallel calculations with and without the empirical Bayes step.\n\n## Credit where credit is due\n\nI discovered this workaround in Google and/or Stack Overflow searches in 2023 but did not carefully note its source. It may well have been suggested by one of the *limma* package authors.\n\nI have placed this same material in a [gist](https://gist.github.com/sjmatkovich/19a31d1eaec20bdb18b841c58faf04c6 \"limma without eBayes 2024\")\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}